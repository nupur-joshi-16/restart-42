15. Create Rust Project with Cargo

Chapter 15: Create Rust Project with Cargo

----

What is Cargo?

Cargo is the official build system and package manager for the Rust programming language.
It handles three main things for a Rust project:
1. Building Your Code: Compiling your source code.
2. Managing Dependencies: Handling external libraries (crates) your project needs.
3. Running Tests: Executing your project's tests.
In Simple Terms: Cargo is like a project organizer that manages everything from downloading dependencies to compiling the final program. Cargo is a command line tool that helps manage Rust projects.

----

Project Initialization Command

Command: `cargo new project_name`
Purpose: This command creates a new Rust project (which Cargo calls a "package") in the current directory.
Naming Convention: The project name should be in snake_case (e.g., `my_first_project`, `data_processor`).
Default Output : The command creates a new directory named `project_name` containing the necessary files like `Cargo.toml` and the source code file `src/main.rs`.

----

Project / Package / Crate: Key Distinctions

Package: The top-level unit managed by Cargo (defined by Cargo.toml). It is a collection of one or more crates.
Crate: The fundamental compilation unit in Rust. A package contains at least one crate (e.g., a binary crate or a library crate).
Project: (Informal) Generally used interchangeably with "Package" when referring to the code you are working on.

Note: A package containing a src/main.rs file creates a **binary crate** (an executable program).

----

Two Types of Rust Packages/Crates

Rust packages are categorized based on the type of Crate they produce:

1. Binary Crate (or Binary Package):
Purpose : Creates an executable program that runs directly (like a command line application).
Requirement : Must contain a `src/main.rs` file.

2. Library Crate (or Library Package):
Purpose: Creates code that can be shared and imported for use in other Rust projects.
Requirement: Must contain a `src/lib.rs` file.

----

Project Folder Structure and Components

src directory: Contains all the source code files. This is where your code lives.
main.rs file: The entry point for a Binary Crate (an executable program). Program execution starts here.
target directory: Contains all compiled output and temporary build files. This is where the final executable is stored.
.gitignore: A file used to tell Git which files/folders (like 'target') to ignore and not commit to the repository.
Cargo.toml file (The Manifest): The main configuration file for the package. It defines dependencies and metadata.
Cargo.lock file: Locks the exact versions of all dependencies to ensure consistent builds across environments. Do not edit this file manually.



